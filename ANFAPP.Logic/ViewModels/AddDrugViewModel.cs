using System;
using ANFAPP.Logic.EventHandlers;
using ANFAPP.Logic.Database.DAOs;
using ANFAPP.Logic.Models.Out;
using ANFAPP.Logic.Database.Models;
using ANFAPP.Logic.Network.Services;
using System.Threading.Tasks;
using ANFAPP.Logic.Models.Out.Ecommerce;
using ANFAPP.Logic.Exceptions;

namespace ANFAPP.Logic.ViewModels
{
    public class AddDrugViewModel : IViewModel
    {
		public AddDrugViewModel() : base() {
			ShowDrug = false;
		}

        #region Event handlers

		public OnLoadStartEventHandler OnLoadStart;
		public OnSuccessEventHandler OnLoadComplete;
        public OnErrorEventHandler OnError;
        public OnAddDrugSuccessEventHandler OnSuccess;

        #endregion

        #region

		private ProductOut _selectedDrug;
        public ProductOut SelectedDrug
        {
            get { 
                return _selectedDrug;
            }
            internal set { 
                _selectedDrug = value;
                OnPropertyChanged ("SelectedDrug");
            }
        }

		private GetPAOut _activePrinciple;
		public GetPAOut ActivePrinciple
		{
			get { return _activePrinciple; }
			set
			{
				_activePrinciple = value;
				OnPropertyChanged("ActivePrinciple");
			}
		}
        
		private string _notes;
        public string Notes { 
			get { return _notes; } 
            set 
			{
				_notes = value;
				OnPropertyChanged("Notes");
            } 
        }

		private bool _warnUser;
        public bool WarnUser { 
			get { return _warnUser; } 
            set {
				_warnUser = value;
                OnPropertyChanged ("WarnUser");
            } 
        }

		
		private bool _showDrug;
        public bool ShowDrug {
            get { 
                return _showDrug;
            }
            set { 
                _showDrug = value;
                OnPropertyChanged ("ShowDrug");
            }
		}

        #endregion

		public async Task SelectMedicineWithCNP(string CNP)
		{
			if (string.IsNullOrWhiteSpace (CNP))
				return;

			int cnp;
			if (! int.TryParse (CNP, out cnp)) {
				if (null != OnError)
					OnError ("", string.Format("'{0}' não é um CNP válido.", CNP));
			}

			if (null != OnLoadStart) {
				await OnLoadStart ();
			}

			try {
				var result = await ECommerceWS.ProdDetail(SessionData.UserAuthentication, SessionData.StorePharmacyId, cnp);
				if (result == null || result.code != 200)
				{
					throw new ServiceErrorException(
						(result != null && !string.IsNullOrEmpty(result.msg)) ? result.msg : AppResources.AddDrugNoResultsMessage);
				}

				// Get Active Principle
				if (result.ActivePrinid.HasValue)
				{
					ActivePrinciple = await ECommerceWS.GetPA(SessionData.UserAuthentication, result.ActivePrinid.Value, null, SessionData.StorePharmacyId);
				}
				//change to medicine page
				UpdateSearchResults(new ProductOut {
					CNP = result.CNP,
					Name = result.Name,
					FF = result.FF,
					Dosage = result.Dosage,
					Pack = result.Pack,
					Price = result.Price,
					Points = result.Points,
					HasPoints = result.HasPoints,
					MSRM = result.MSRM.HasValue ? result.MSRM.Value : false,
					Generic = result.Generic.HasValue ? result.Generic.Value : false,
					BrandId = result.BrandId,
					Brand = result.Brand,
					CatGroup = result.CatGroup,
				});
			} catch (Exception e) {
				string message = e.Message;
				if (!(e is InvalidRequestException) && !(e is NetworkingException)) message = AppResources.GenericErrorMessage;
				if (OnError != null) OnError(null, message);
			}
			finally
			{
				if (null != OnLoadComplete) OnLoadComplete();
			}
		}

        public async Task AddMedicine()
        {
			var medicine = new Medicine () {
				CNP = _selectedDrug.CNP.ToString(),
                Name = _selectedDrug.Name,
				Dosage = _selectedDrug.Dosage ?? "PLACEHOLDER (OUT: NULL)",
				Qty = _selectedDrug.Pack == null ? "1" : _selectedDrug.Pack.ToString(),
                Notes = Notes,
                WarningFlag = WarnUser,
				PharmaceuticalUnit = _selectedDrug.FF ?? "PLACEHOLDER (OUT: NULL)",
            };
                
            try {
                var response = await SchedulerWS.NewMedToUser(
                    medicine.CNP, 
                    medicine.Name, 
                    medicine.Dosage, 
                    medicine.Qty, 
                    medicine.WarningFlag, 
                    medicine.PharmaceuticalUnit, 
                    medicine.Notes,
					ActivePrinciple != null ? ActivePrinciple.ActivePrinciple : null);

                if (response.OK) {
                    var dao = new MedicineDAO ();
                    medicine.Id = response.MedID;
					medicine.AutoGeneratedSchedule = response.AutoGeneratedSchedule;
                    await dao.Insert (medicine);
                }

                if (null != OnSuccess) OnSuccess(medicine);
            } catch (Exception ex) {
                if (null != OnError)
                    OnError (null, ex.Message);
            }
        }

        public void UpdateSearchResults(ProductOut results)
        {           
            SelectedDrug = results;
            ShowDrug = results != null;
        }
    }
}
