using ANFAPP.Logic.Database.DAOs;
using ANFAPP.Logic.Database.Models;
using ANFAPP.Logic.EventHandlers;
using ANFAPP.Logic.Helpers;
using ANFAPP.Logic.Network.Services;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Globalization;
using ANFAPP.Logic.Exceptions;

namespace ANFAPP.Logic.ViewModels
{
    public class AddDosingScheduleViewModel : IViewModel
    {

        #region Picker Constants

        public IList<BindablePickerItem> DurationTypes { get { return _durationTypes; } }
        private readonly IList<BindablePickerItem> _durationTypes = new List<BindablePickerItem>() {
			new BindablePickerItem() 
			{
				Code = 1,
				Name = AppResources.AddDosingScheduleDaysComboLabel
			},
			new BindablePickerItem() 
			{
				Code = 2,
				Name = AppResources.AddDosingScheduleWeeksComboLabel
			},
			new BindablePickerItem() 
			{
				Code = 3,
				Name = AppResources.AddDosingScheduleMonthsComboLabel
			}
		};

        #endregion

        #region Event Handlers

        public delegate void OnSuccessAddEventHandler(DosingSchedule schedule);

        public OnSuccessEventHandler OnLoadFinished;
        public OnSuccessAddEventHandler OnSuccess;
        public OnErrorEventHandler OnError;

        #endregion

        #region Binding Properties

        private List<Medicine> _drugs;
        public List<Medicine> Drugs
        {
            get { return _drugs; }
            set
            {
                _drugs = value;
                OnPropertyChanged("Drugs");
            }
        }

        private string _description;
        public string Description
        {
            get { return _description; }
            set
            {
                _description = value;
                OnPropertyChanged("Description");
            }
        }

        private Medicine _medicine;
        public Medicine Medicine
        {
            get { return _medicine; }
            set
            {
                _medicine = value;
                OnPropertyChanged("Medicine");
				OnPropertyChanged("ShowScheduleOptions");
            }
        }

        private DateTime _date = DateTime.Now;
        public DateTime Date
        {
            get { return _date; }
            set
            {
                _date = value;
                OnPropertyChanged("Date");
            }
        }

		private TimeSpan _time = DateTime.Now.TimeOfDay;
        public TimeSpan Time
        {
            get { return _time; }
            set
            {
                _time = value;
                OnPropertyChanged("Time");
            }
        }

        private bool _hourInterval = true;
        public bool HourInterval
        {
            get { return _hourInterval; }
            set
            {
                _hourInterval = value;
                OnPropertyChanged("HourInterval");
            }
        }

        private string _interval;
        public string Interval
        {
            get { return _interval; }
            set
            {
                _interval = value;
                OnPropertyChanged("Interval");
            }
        }

        private string _duration;
        public string Duration
        {
            get { return _duration; }
            set
            {
                _duration = value;
                OnPropertyChanged("Duration");
            }
        }

        private BindablePickerItem _durationType;
        public BindablePickerItem DurationType
        {
            get { return _durationType; }
            set
            {
                _durationType = value;
                OnPropertyChanged("DurationType");
            }
        }

        private string _quantity;
        public string Quantity
        {
            get { return _quantity; }
            set
            {
                _quantity = value;
                OnPropertyChanged("Quantity");
            }
        }

        private string _notes;
        public string Notes
        {
            get { return _notes; }
            set
            {
                _notes = value;
                OnPropertyChanged("Notes");
            }
        }

		public bool ShowScheduleOptions
		{
			get { return _medicine == null || !_medicine.AutoGeneratedSchedule; }
		}

        #endregion

        #region Database

        private DosageDAO _dosageDAO = new DosageDAO();
        private MedicineDAO _medicineDAO = new MedicineDAO();
        private DosingScheduleDAO _dosingScheduleDAO = new DosingScheduleDAO();

        #endregion

        #region Tasks

        public async void LoadData(DosingSchedule schedule = null)
        {
            // Get list of drugs from the database
            Drugs = await _medicineDAO.GetAllWithDosage();

            // Initialize dosing schedule with saved data
            if (schedule != null)
            {
                Description = schedule.Description;
                Medicine = Drugs.Where(d => d.Id.Equals(schedule.MedicineId)).FirstOrDefault();
                HourInterval = schedule.HourInterval;
                Interval = schedule.Interval > 0 ? schedule.Interval + string.Empty : null;
                Duration = schedule.Duration > 0 ? schedule.Duration + string.Empty : null;
                DurationType = DurationTypes.Where(d => d.Code.Equals(schedule.DurationTypeId)).FirstOrDefault();
                Quantity = schedule.Quantity;
                Notes = schedule.Notes;
            }

            if (OnLoadFinished != null) OnLoadFinished();
        }

        /// <summary>
        /// Add a dosing schedule.
        /// </summary>
        public async void AddDosingSchedule()
        {
            if (!ValidateInputs()) return;

            // Parse duration and interval
            double quantity = 0.0;
            int duration = 0, interval = 0;
            int.TryParse(Duration, out duration);
            int.TryParse(Interval, out interval);
            double.TryParse(Quantity, NumberStyles.Any, CultureInfo.InvariantCulture, out quantity);

            try
            {
                var response = await SchedulerWS.NewPlanToMed(
					SessionData.PharmacyUser.Username,
                    Medicine.Id,
                    Description,
					NormalizeInputDate(),
                    interval,
                    HourInterval ? 2 : 1,
                    duration,
                    DurationType.Code,
                    quantity,
                    Notes);

                // Create Dosages...
                if (response.OK)
                {
                    var toInsert = new List<Dosage>();

                    foreach (var item in response.Tomas)
                    {
						DateTime date = DateTime.Parse(item.DataHora, CultureInfo.InvariantCulture, DateTimeStyles.RoundtripKind);
						date = date.ToUniversalTime();
						System.Diagnostics.Debug.WriteLine("STR: {0} DATE {1} KIND {2}", item.DataHora, date.ToString("o"), date.Kind);

                        var dosage = new Dosage()
                        {
                            Id = item.TomaID,
                            ScheduleId = response.PlanID,
                            Date = date,
							Time = new TimeSpan(0),
                            Quantity = item.Qtd
                        };

                        toInsert.Add(dosage);
                    }

                    // ... and the Schedule.
                    var schedule = new DosingSchedule()
                    {
                        Id = response.PlanID,
                        Description = Description,
                        Notes = Notes,
                        MedicineId = Medicine.Id,
                        MedicineName = Medicine.FullDescription,
                        Quantity = Quantity,

                        HourInterval = HourInterval,
                        Interval = interval,
                        Duration = duration,
                        DurationTypeId = DurationType.Code
                    };

                    await _dosageDAO.InsertAll(toInsert);
                    await _dosingScheduleDAO.Insert(schedule);

                    // Notify success
                    if (OnSuccess != null) OnSuccess(schedule);
                }
                else
                {
                    if (OnError != null) OnError(null, response.ErrorMessage);
                }

            }
            catch (Exception ex)
            {
                if (OnError != null) OnError(null, ex.Message);
            }
        }

		private DateTime NormalizeInputDate()
		{
			return DosageBase.NormalizedDate (Date, Time);
		}

        /// <summary>
        /// Validates the inputs.
        /// </summary>
        /// <returns></returns>
        private bool ValidateInputs()
        {
            if (Medicine == null)
            {
                // Medicine not selected
                if (OnError != null) OnError(null, AppResources.AddDosingScheduleErrorMedicineMessage);

                return false;
            }
            else
            {
                if (string.IsNullOrEmpty(Description))
                {
                    // Empty Name
                    if (OnError != null) OnError(null, AppResources.AddDosingScheduleErrorEmptyNameFieldsMessage);
                    return false;
                }
                
				// Ignore the following validations if the me-dicine has auto generated schedules
				if (Medicine.AutoGeneratedSchedule) return true;

				if (string.IsNullOrEmpty(Interval) || DurationType == null || string.IsNullOrEmpty(Duration))
                {
                    // Empty Intervals
                    if (OnError != null) OnError(null, AppResources.AddDosingScheduleErrorEmptyIntervalsFieldsMessage);
                    return false;
                }
                else if (string.IsNullOrEmpty(Quantity))
                {
                    // Empty Quantity
                    if (OnError != null) OnError(null, AppResources.AddDosingScheduleErrorEmptyQuantityFieldsMessage);
                    return false;
                }
            }

            return true;
        }

        #endregion

    }
}
